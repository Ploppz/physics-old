!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
ABSOLUTE	BodySystem.h	/^enum PositionType { ABSOLUTE, RELATIVE };$/;"	e	enum:PositionType
Area	typewriter/skyline-bl.h	/^	struct Area {$/;"	s	namespace:SBL
AtlasType	typewriter/FontTexture.h	/^enum AtlasType {$/;"	g
Axis	Polygon.h	/^enum Axis { X=0, Y=1 };$/;"	g
BACK	Polygon.h	/^enum Direction { FORTH=0, BACK=1 };$/;"	e	enum:Direction
BodySystem	BodySystem.h	/^class BodySystem$/;"	c
BodySystem	BodySystem.cpp	/^BodySystem::BodySystem()$/;"	f	class:BodySystem
Body	BodySystem.h	/^class Body$/;"	c
Body	BodySystem.cpp	/^Body::Body(BodySystem *system, int index)$/;"	f	class:Body
Body	BodySystem.h	/^	Body() {}$/;"	f	class:Body
BufferWriter	glutils.h	/^class BufferWriter$/;"	c
BufferWriter	glutils.h	/^    BufferWriter(int size)$/;"	f	class:BufferWriter
DISTAA	typewriter/edtaa3func.c	141;"	d	file:
DISTAA	typewriter/edtaa3func.h	48;"	d
Diagonal	Polygon.h	/^    class Diagonal$/;"	c	class:Polygon
Diagonal	Polygon.h	/^        Diagonal(int vertex1, int vertex2, Polygon *parent)$/;"	f	class:Polygon::Diagonal
Direction	Polygon.h	/^enum Direction { FORTH=0, BACK=1 };$/;"	g
EdgeComparator	Polygon.cpp	/^struct EdgeComparator$/;"	s	file:
Edge	Polygon.h	/^    class Edge$/;"	c	class:Polygon
Edge	Polygon.h	/^    class Edge$/;"	c	class:SubPolygon
Edge	Polygon.cpp	/^Polygon::Edge::Edge(int index, Polygon *parent)$/;"	f	class:Polygon::Edge
Edge	Polygon.cpp	/^SubPolygon::Edge::Edge(int index, SubPolygon *parent)$/;"	f	class:SubPolygon::Edge
Edge	Polygon.h	/^        Edge() :index(0), parent(0) {}$/;"	f	class:SubPolygon::Edge
Edge	Polygon.h	/^        Edge():index(0), parent(0) {};$/;"	f	class:Polygon::Edge
FORTH	Polygon.h	/^enum Direction { FORTH=0, BACK=1 };$/;"	e	enum:Direction
FontRenderer	typewriter/FontRenderer.h	/^class FontRenderer$/;"	c
FontRenderer	typewriter/FontRenderer.cpp	/^FontRenderer::FontRenderer(int size, FontTexture &texture)$/;"	f	class:FontRenderer
FontTexture	typewriter/FontTexture.h	/^class FontTexture$/;"	c
FontTexture	typewriter/FontTexture.cpp	/^FontTexture::FontTexture()$/;"	f	class:FontTexture
FontVertex	typewriter/FontRenderer.h	/^	FontVertex(float x, float y, float z, float u, float v) {$/;"	f	struct:FontVertex
FontVertex	typewriter/FontRenderer.h	/^struct FontVertex$/;"	s
GLFW_boilerPlate	glutils.cpp	/^void GLFW_boilerPlate(GLFWwindow **window, GLFWerrorfun error_callback)$/;"	f
GlyphHolder	typewriter/FontTexture.cpp	/^struct GlyphHolder$/;"	s	file:
Glyph	typewriter/FontTexture.h	/^	Glyph() :charcode{}, width{}, height{}, xoffset{}, yoffset{}, u{}, v{}, twidth{}, theight{} {}$/;"	f	struct:Glyph
Glyph	typewriter/FontTexture.h	/^struct Glyph$/;"	s
Graph	tmp.h	/^class Graph$/;"	c
INCLUDE_STB_IMAGE_WRITE_H	typewriter/stb_image_write.h	81;"	d
LineSegment	BodySystem.cpp	/^typedef std::pair<glm::vec2, glm::vec2> LineSegment;$/;"	t	file:
LineSegment	Polygon.h	/^typedef std::pair<glm::vec2, glm::vec2> LineSegment;$/;"	t
NORMAL	typewriter/FontTexture.h	/^	SDF, NORMAL$/;"	e	enum:AtlasType
Node	tmp.h	/^    class Node$/;"	c	class:Graph
PointLessThan	typewriter/skyline-bl.h	/^	struct PointLessThan {$/;"	s	namespace:SBL
Point	typewriter/skyline-bl.h	/^		Point() {}$/;"	f	struct:SBL::Point
Point	typewriter/skyline-bl.h	/^		Point(double x, double y) {$/;"	f	struct:SBL::Point
Point	typewriter/skyline-bl.h	/^	struct Point$/;"	s	namespace:SBL
Polygon	Polygon.h	/^class Polygon$/;"	c
Polygon	Polygon.cpp	/^Polygon::Polygon()$/;"	f	class:Polygon
PositionType	BodySystem.h	/^enum PositionType { ABSOLUTE, RELATIVE };$/;"	g
RELATIVE	BodySystem.h	/^enum PositionType { ABSOLUTE, RELATIVE };$/;"	e	enum:PositionType
Renderer	Renderer.h	/^class Renderer$/;"	c
Renderer	Renderer.cpp	/^Renderer::Renderer(BodySystem& system)$/;"	f	class:Renderer
SBL	typewriter/skyline-bl.cpp	/^namespace SBL {$/;"	n	file:
SBL	typewriter/skyline-bl.h	/^namespace SBL {$/;"	n
SDF	typewriter/FontTexture.h	/^	SDF, NORMAL$/;"	e	enum:AtlasType
SQRT2	typewriter/edtaa3func.c	48;"	d	file:
STBIW_ASSERT	typewriter/stb_image_write.h	126;"	d
STBIW_FREE	typewriter/stb_image_write.h	117;"	d
STBIW_MALLOC	typewriter/stb_image_write.h	115;"	d
STBIW_MEMMOVE	typewriter/stb_image_write.h	120;"	d
STBIW_REALLOC	typewriter/stb_image_write.h	116;"	d
STB_IMAGE_WRITE_IMPLEMENTATION	typewriter/FontTexture.cpp	3;"	d	file:
SingleFormat	glutils.cpp	/^	SingleFormat(int offset, int numComponents, char type, char name[30])$/;"	f	struct:SingleFormat
SingleFormat	glutils.cpp	/^struct SingleFormat {$/;"	s	file:
Size	typewriter/skyline-bl.h	/^		Size() {};$/;"	f	struct:SBL::Size
Size	typewriter/skyline-bl.h	/^		Size(double width, double height, T key) { this->width = width; this->height = height; this->key = key;}$/;"	f	struct:SBL::Size
Size	typewriter/skyline-bl.h	/^	struct Size {$/;"	s	namespace:SBL
SkylineBL_alg	typewriter/skyline-bl.h	/^	class SkylineBL_alg$/;"	c	namespace:SBL
SkylineBL_alg	typewriter/skyline-bl.h	/^		SkylineBL_alg(std::vector<Size<T>> rectangles)$/;"	f	class:SBL::SkylineBL_alg
Skyline	typewriter/skyline-bl.h	/^	typedef std::set<Point> Skyline;$/;"	t	namespace:SBL
SubPolygon	Polygon.h	/^class SubPolygon$/;"	c
SubPolygon	Polygon.h	/^    SubPolygon():mother(0) {};$/;"	f	class:SubPolygon
SubPolygon	Polygon.h	/^    SubPolygon(Polygon *mother):mother(mother) {};$/;"	f	class:SubPolygon
Triangle	Polygon.h	/^    Triangle(glm::vec2 a, glm::vec2 b, glm::vec2 c, glm::vec3 color):a(a), b(b), c(c), color(color) {};$/;"	f	struct:Triangle
Triangle	Polygon.h	/^struct Triangle$/;"	s
VAO	typewriter/FontRenderer.h	/^	GLuint VAO;$/;"	m	class:FontRenderer
Vertex	Polygon.h	/^    class Vertex$/;"	c	class:Polygon
Vertex	Polygon.h	/^    class Vertex$/;"	c	class:SubPolygon
Vertex	Polygon.cpp	/^Polygon::Vertex::Vertex(int index, Polygon* parent)$/;"	f	class:Polygon::Vertex
Vertex	Polygon.cpp	/^SubPolygon::Vertex::Vertex(int index, SubPolygon *parent)$/;"	f	class:SubPolygon::Vertex
Vertex	Polygon.h	/^        Vertex() :index(0), parent(0) {}$/;"	f	class:SubPolygon::Vertex
Vertex	Polygon.h	/^        Vertex(): index(0), parent(0) {};$/;"	f	class:Polygon::Vertex
World	World.h	/^class World $/;"	c
X	Polygon.h	/^enum Axis { X=0, Y=1 };$/;"	e	enum:Axis
Y	Polygon.h	/^enum Axis { X=0, Y=1 };$/;"	e	enum:Axis
abs_mod	Polygon.cpp	/^int abs_mod(int n, int range)$/;"	f
addBody	BodySystem.cpp	/^Body BodySystem::addBody()$/;"	f	class:BodySystem
addBody	BodySystem.cpp	/^Body BodySystem::addBody(Body parent)$/;"	f	class:BodySystem
addPoint	typewriter/skyline-bl.cpp	/^	void addPoint(GLfloat *data, int &i, double x, double y, double r, double g, double b)$/;"	f	namespace:SBL
addText	typewriter/FontRenderer.cpp	/^void FontRenderer::addText(std::string text, float penx, float peny, bool kerning)$/;"	f	class:FontRenderer
addToBuffer	BodySystem.cpp	/^unsigned int Body::addToBuffer(float *buffer, int offset)$/;"	f	class:Body
addToBuffer	BodySystem.cpp	/^void Body::addToBuffer(BufferWriter<float> &buffer)$/;"	f	class:Body
addToBuffer	BodySystem.cpp	/^void Body::addToBuffer(std::vector<float> &buffer)$/;"	f	class:Body
addToBuffer	tmp.cpp	/^unsigned int addToBuffer(LineSegment e, float *buffer, int offset)$/;"	f
addToBuffer	tmp.cpp	/^void addToBuffer(LineSegment e, BufferWriter<float> & buffer, float r, float g, float b)$/;"	f
addToBuffer	tmp.cpp	/^void addToBuffer(LineSegment e, std::vector<float> &buffer)$/;"	f
a	Polygon.h	/^    glm::vec2 a,b,c;$/;"	m	struct:Triangle
angle	Geometry.cpp	/^float angle(vec2 a, vec2 b, vec2 c)$/;"	f
angularSpeed	BodySystem.h	/^		inline float& angularSpeed() { return system->angularSpeed[index]; }$/;"	f	class:Body
angularSpeed	BodySystem.h	/^	std::vector<float> angularSpeed;$/;"	m	class:BodySystem
appendStencilTriangles	Polygon.cpp	/^void Polygon::appendStencilTriangles(std::vector<float> &buffer)$/;"	f	class:Polygon
applyEdtaa3	typewriter/FontTexture.cpp	/^double *applyEdtaa3(unsigned char *image, int width, int height)$/;"	f
atlasHeight	typewriter/FontTexture.h	/^	int atlasWidth, atlasHeight;$/;"	m	class:FontTexture
atlasWidth	typewriter/FontTexture.h	/^	int atlasWidth, atlasHeight;$/;"	m	class:FontTexture
atlas	typewriter/FontTexture.h	/^	std::vector<float> atlas;$/;"	m	class:FontTexture
axis_tag	Polygon.cpp	/^template<Axis> struct axis_tag { };$/;"	s	file:
barycentric	Geometry.cpp	/^vec3 barycentric(vec2 a, vec2 b, vec2 c, vec2 p)$/;"	f
bitmap	typewriter/FontTexture.cpp	/^	FT_Bitmap bitmap;$/;"	m	struct:GlyphHolder	file:
b	Polygon.h	/^    glm::vec2 a,b,c;$/;"	m	struct:Triangle
bodies	World.h	/^	BodySystem bodies;$/;"	m	class:World
bufferRef	typewriter/FontRenderer.h	/^	GLuint bufferRef;$/;"	m	class:FontRenderer
buffer	typewriter/FontRenderer.h	/^	std::vector<float> buffer;$/;"	m	class:FontRenderer
centroid	Polygon.cpp	/^glm::vec2 Polygon::centroid()$/;"	f	class:Polygon
charcode	typewriter/FontTexture.h	/^	wchar_t charcode;$/;"	m	struct:Glyph
children	BodySystem.h	/^    std::vector<std::vector<Body>> children;$/;"	m	class:BodySystem
clearBuffer	typewriter/FontRenderer.cpp	/^void FontRenderer::clearBuffer()$/;"	f	class:FontRenderer
c	Polygon.h	/^    glm::vec2 a,b,c;$/;"	m	struct:Triangle
color_program	Renderer.h	/^    GLuint pos2_program, color_program;$/;"	m	class:Renderer
color_vao	Renderer.h	/^    GLuint triangles_vao, color_vao;$/;"	m	class:Renderer
color_vbo	Renderer.h	/^    GLuint triangles_vbo, color_vbo;$/;"	m	class:Renderer
color	Polygon.h	/^    glm::vec3 color;$/;"	m	struct:Triangle
computeDF	typewriter/FontTexture.cpp	/^float *computeDF(unsigned char *image, int width, int height)$/;"	f
compute	typewriter/skyline-bl.h	/^		std::vector<Area<T>> compute(double &outWidth, double &outHeight)$/;"	f	class:SBL::SkylineBL_alg
computegradient	typewriter/edtaa3func.c	/^void computegradient(double *img, int w, int h, double *gx, double *gy)$/;"	f
containsDiagonal	Polygon.cpp	/^bool SubPolygon::containsDiagonal(int a, int b)$/;"	f	class:SubPolygon
copyBitmap	typewriter/FontTexture.cpp	/^FT_Bitmap copyBitmap(FT_Bitmap &bm)$/;"	f
count	BodySystem.h	/^	int count;$/;"	m	class:BodySystem
createShaderProgram	glutils.cpp	/^GLuint createShaderProgram(const GLchar* vertSrc, const GLchar* fragSrc, GLuint& vertexShaderRef, GLuint& fragmentShaderRef)$/;"	f
createVertexArrayObject	glutils.cpp	/^GLuint createVertexArrayObject()$/;"	f
ctype	glutils.cpp	/^	char ctype;$/;"	m	struct:SingleFormat	file:
decompose	Polygon.cpp	/^int Polygon::decompose(std::vector<Triangle> &triangles, std::vector<LineSegment> &addedLines)$/;"	f	class:Polygon
distaa3	typewriter/edtaa3func.c	/^double distaa3(double *img, double *gximg, double *gyimg, int w, int c, int xc, int yc, int xi, int yi)$/;"	f
distance	Geometry.cpp	/^float distance(vec2 a, vec2 b)$/;"	f
distance	Geometry.cpp	/^float distance(vec2 p, vec2 line_a, vec2 line_b)$/;"	f
down_down	main.cpp	/^bool left_down, right_down, up_down, down_down;$/;"	v
edgedf	typewriter/edtaa3func.c	/^double edgedf(double gx, double gy, double a)$/;"	f
edtaa3	typewriter/edtaa3func.c	/^void edtaa3(double *img, double *gx, double *gy, int w, int h, short *distx, short *disty, double *dist)$/;"	f
edtaa3	typewriter/edtaa3func.h	/^namespace edtaa3 {$/;"	n
endIndex	Polygon.h	/^        int endIndex()          { return end_index;}$/;"	f	class:Polygon::Diagonal
end_index	Polygon.h	/^        int end_index;$/;"	m	class:Polygon::Diagonal
end	Polygon.cpp	/^glm::vec2& Polygon::Edge::end() const$/;"	f	class:Polygon::Edge
end	Polygon.cpp	/^glm::vec2& SubPolygon::Edge::end() const$/;"	f	class:SubPolygon::Edge
end	Polygon.h	/^        glm::vec2& end() const   { return parent->vertices[end_index];}$/;"	f	class:Polygon::Diagonal
erase	Polygon.cpp	/^void erase(std::set<SubPolygon::Edge, T>& set, int edge_index, SubPolygon* sub_polygon)$/;"	f
error_callback	main.cpp	/^void error_callback(int error, const char* description)$/;"	f
file_exists	main.cpp	/^bool file_exists(const std::string &name)$/;"	f
fill	Polygon.cpp	/^void SubPolygon::fill()$/;"	f	class:SubPolygon
findBestPosition	typewriter/skyline-bl.h	/^		skyline_ptr findBestPosition(Size<T> rect)$/;"	f	class:SBL::SkylineBL_alg
fontRenderer	main.cpp	/^FontRenderer *fontRenderer;$/;"	v
force	BodySystem.h	/^		inline glm::vec2& force() { return system->force[index]; }$/;"	f	class:Body
force	BodySystem.h	/^	std::vector<glm::vec2> force;$/;"	m	class:BodySystem
generateAtlas	typewriter/FontTexture.cpp	/^void FontTexture::generateAtlas(std::string fontpath)$/;"	f	class:FontTexture
generateAtlas	typewriter/FontTexture.cpp	/^void FontTexture::generateAtlas(std::string fontpath, int resolution, AtlasType type)$/;"	f	class:FontTexture
generateVertices	typewriter/skyline-bl.h	/^	GLfloat *generateVertices(const std::vector<Area<T>> &atlas, int &length)$/;"	f	namespace:SBL
getAtlasHeight	typewriter/FontTexture.h	/^	int getAtlasHeight() { return atlasHeight; }$/;"	f	class:FontTexture
getAtlasWidth	typewriter/FontTexture.h	/^	int getAtlasWidth() { return atlasWidth; }$/;"	f	class:FontTexture
getBody	BodySystem.cpp	/^Body BodySystem::getBody(int index)$/;"	f	class:BodySystem
getEdgeJustBelow	Polygon.cpp	/^SubPolygon::Edge getEdgeJustBelow(T_set s, SubPolygon::Vertex subject)$/;"	f
getEdgeJustBelow	Polygon.cpp	/^SubPolygon::Edge getEdgeJustBelow(T_set s, SubPolygon::Vertex subject, axis_tag<X>)$/;"	f
getEdgeJustBelow	Polygon.cpp	/^SubPolygon::Edge getEdgeJustBelow(T_set s, SubPolygon::Vertex subject, axis_tag<Y>)$/;"	f
getEdge	Polygon.cpp	/^LineSegment Polygon::getEdge(int index)$/;"	f	class:Polygon
getGlyph	typewriter/FontTexture.cpp	/^Glyph &FontTexture::getGlyph(unsigned char ch)$/;"	f	class:FontTexture
getIndexIndex	Polygon.h	/^        int getIndexIndex() const { return index; }$/;"	f	class:SubPolygon::Edge
getIndexIndex	Polygon.h	/^        int getIndexIndex() { return index; }$/;"	f	class:SubPolygon::Vertex
getIndex	Polygon.cpp	/^int SubPolygon::Edge::getIndex() const$/;"	f	class:SubPolygon::Edge
getIndex	Polygon.h	/^        int getIndex() const { return index; }$/;"	f	class:Polygon::Edge
getIndex	Polygon.h	/^        int getIndex() { return index; }$/;"	f	class:Polygon::Vertex
getIndex	Polygon.h	/^        int getIndex() { return parent->indices[index]; }$/;"	f	class:SubPolygon::Vertex
getParent	Polygon.h	/^        SubPolygon& getParent() const { return *parent; }$/;"	f	class:SubPolygon::Edge
glyph	typewriter/FontTexture.cpp	/^	Glyph *glyph;$/;"	m	struct:GlyphHolder	file:
glyphs	typewriter/FontTexture.h	/^	std::vector<Glyph> glyphs;$/;"	m	class:FontTexture
greater_than	Polygon.cpp	/^bool greater_than(T a, T b){$/;"	f
height	typewriter/FontTexture.h	/^	float width, height;$/;"	m	struct:Glyph
height	typewriter/skyline-bl.h	/^		double width, height, x, y;$/;"	m	struct:SBL::Area
height	typewriter/skyline-bl.h	/^		double width, height;$/;"	m	class:SBL::SkylineBL_alg
height	typewriter/skyline-bl.h	/^		double width, height;$/;"	m	struct:SBL::Size
index	BodySystem.h	/^	int index;$/;"	m	class:Body
index	Polygon.h	/^        int index;$/;"	m	class:Polygon::Edge
index	Polygon.h	/^        int index;$/;"	m	class:Polygon::Vertex
index	Polygon.h	/^        int index;$/;"	m	class:SubPolygon::Edge
index	Polygon.h	/^        int index;$/;"	m	class:SubPolygon::Vertex
indices	Polygon.h	/^    std::vector<int> indices; \/\/ Indices in polygon vertex buffer$/;"	m	class:SubPolygon
insertImage	typewriter/FontTexture.cpp	/^void insertImage(unsigned char *dest, int destW, int destH, unsigned char* src, int srcW, int srcH, int destX, int destY)$/;"	f
insert	typewriter/skyline-bl.h	/^		void insert(Size<T> rect, skyline_ptr where, std::vector<Area<T>> &atlas)$/;"	f	class:SBL::SkylineBL_alg
inside	Geometry.cpp	/^bool inside(vec2 point, Body &body)$/;"	f
intersect	Geometry.cpp	/^bool intersect(vec2 line1_a, vec2 line1_b, vec2 line2_a, vec2 line2_b)$/;"	f
invertImage	typewriter/FontTexture.cpp	/^unsigned char *invertImage(unsigned char *image, int width, int height)$/;"	f
kerning	typewriter/FontTexture.h	/^	float kerning[255];$/;"	m	struct:Glyph
key_callback	main.cpp	/^void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)$/;"	f
key	typewriter/skyline-bl.h	/^		T key;$/;"	m	struct:SBL::Area
key	typewriter/skyline-bl.h	/^		T key;$/;"	m	struct:SBL::Size
left_down	main.cpp	/^bool left_down, right_down, up_down, down_down;$/;"	v
leftof	Geometry.cpp	/^bool leftof(vec2 a, vec2 b)$/;"	f
less_than	Polygon.cpp	/^bool less_than(T a, T b){$/;"	f
main	main.cpp	/^int main()$/;"	f
mass	BodySystem.h	/^		inline float& mass() { return system->mass[index]; }$/;"	f	class:Body
mass	BodySystem.h	/^	std::vector<float> mass;$/;"	m	class:BodySystem
middle	Geometry.cpp	/^vec2 middle(vec2 a, vec2 b)$/;"	f
monotonize	Polygon.cpp	/^void SubPolygon::monotonize(std::vector<Polygon::Diagonal> &diagonals, Direction dir)$/;"	f	class:SubPolygon
mother	Polygon.h	/^    Polygon* mother;$/;"	m	class:SubPolygon
name	glutils.cpp	/^	char name[30];$/;"	m	struct:SingleFormat	file:
neighbors	tmp.h	/^        std::vector<int> neighbors; \/\/ indices into graph$/;"	m	class:Graph::Node
nodes	tmp.h	/^    std::vector<Node> nodes;$/;"	m	class:Graph
numBodies	BodySystem.h	/^    int numBodies() const { return count; }$/;"	f	class:BodySystem
numComponents	glutils.cpp	/^	int numComponents;$/;"	m	struct:SingleFormat	file:
numEdges	Polygon.cpp	/^int Polygon::numEdges()$/;"	f	class:Polygon
offset	glutils.cpp	/^	int offset;$/;"	m	struct:SingleFormat	file:
openglCallbackFunction	glutils.cpp	/^void APIENTRY openglCallbackFunction(GLenum source,$/;"	f
operator ()	Polygon.cpp	/^bool EdgeComparator<X>::operator() (const SubPolygon::Edge &lhs, const SubPolygon::Edge &rhs)$/;"	f	class:EdgeComparator
operator ()	Polygon.cpp	/^bool EdgeComparator<Y>::operator() (const SubPolygon::Edge &lhs, const SubPolygon::Edge &rhs)$/;"	f	class:EdgeComparator
operator ()	Polygon.cpp	/^int Polygon::Edge::operator() (int x) const$/;"	f	class:Polygon::Edge
operator ()	typewriter/skyline-bl.h	/^		bool operator() (const Point &lhs, const Point &rhs)$/;"	f	struct:SBL::PointLessThan
operator *	Polygon.cpp	/^glm::vec2& Polygon::Vertex::operator* ()$/;"	f	class:Polygon::Vertex
operator *	Polygon.cpp	/^glm::vec2& SubPolygon::Vertex::operator* ()$/;"	f	class:SubPolygon::Vertex
operator ->	Polygon.cpp	/^glm::vec2* Polygon::Vertex::operator-> ()$/;"	f	class:Polygon::Vertex
operator ->	Polygon.cpp	/^glm::vec2* SubPolygon::Vertex::operator-> ()$/;"	f	class:SubPolygon::Vertex
operator <<	Geometry.cpp	/^std::ostream &operator << (std::ostream &lhs, vec2 &rhs)$/;"	f
operator <<	Geometry.cpp	/^std::ostream &operator << (std::ostream &lhs, vec3 &rhs)$/;"	f
operator <<	Polygon.cpp	/^std::ostream& operator<< (std::ostream& lhs, SubPolygon& p)$/;"	f
operator <<	typewriter/skyline-bl.cpp	/^	std::ostream &operator<< (std::ostream &lhs, const Point &rhs)$/;"	f	namespace:SBL
operator <<	typewriter/skyline-bl.cpp	/^	std::ostream &operator<< (std::ostream &lhs, const std::set<Point> &rhs)$/;"	f	namespace:SBL
operator <<	typewriter/skyline-bl.h	/^	std::ostream &operator<< (std::ostream &lhs, const Area<T> &rhs)$/;"	f	namespace:SBL
operator <<	typewriter/skyline-bl.h	/^	std::ostream &operator<< (std::ostream &lhs, const Size<T> &rhs)$/;"	f	namespace:SBL
operator <<	typewriter/skyline-bl.h	/^	std::ostream &operator<< (std::ostream &lhs, const std::vector<Area<T>> &rhs)$/;"	f	namespace:SBL
operator <	typewriter/skyline-bl.h	/^		bool operator< (const Point &rhs) const {$/;"	f	struct:SBL::Point
operator ==	Polygon.cpp	/^bool Polygon::Edge::operator== (Edge other)$/;"	f	class:Polygon::Edge
operator ==	Polygon.cpp	/^bool SubPolygon::Edge::operator== (Edge other) const $/;"	f	class:SubPolygon::Edge
operator =	Polygon.h	/^        Diagonal& operator= (Diagonal rhs) { parent=rhs.parent; start_index=rhs.start_index; end_index=rhs.end_index; return *this;}$/;"	f	class:Polygon::Diagonal
orientation	BodySystem.h	/^		inline float& orientation() { return system->orientation[index]; }$/;"	f	class:Body
orientation	BodySystem.h	/^	std::vector<float> orientation;$/;"	m	class:BodySystem
ortho2D	glutils.cpp	/^glm::mat4 ortho2D(float width, float height, float far, float near)$/;"	f
outfile	typewriter/stb_image_write.h	/^static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
overlaps	BodySystem.cpp	/^bool BodySystem::overlaps(Body a, Body b)$/;"	f	class:BodySystem
parent	BodySystem.h	/^        inline Body& parent() { return system->parent[index]; }$/;"	f	class:Body
parent	BodySystem.h	/^    std::vector<Body> parent;$/;"	m	class:BodySystem
parent	Polygon.h	/^        Polygon *parent;$/;"	m	class:Polygon::Diagonal
parent	Polygon.h	/^        Polygon *parent;$/;"	m	class:Polygon::Edge
parent	Polygon.h	/^        Polygon *parent;$/;"	m	class:Polygon::Vertex
parent	Polygon.h	/^        SubPolygon *parent;$/;"	m	class:SubPolygon::Edge
parent	Polygon.h	/^        SubPolygon *parent;$/;"	m	class:SubPolygon::Vertex
pos2_program	Renderer.h	/^    GLuint pos2_program, color_program;$/;"	m	class:Renderer
position_type	BodySystem.h	/^        inline PositionType position_type() { return system->position_type[index]; }$/;"	f	class:Body
position_type	BodySystem.h	/^    std::vector<PositionType> position_type;$/;"	m	class:BodySystem
position	BodySystem.h	/^		inline glm::vec2& position() { return system->position[index]; }$/;"	f	class:Body
position	BodySystem.h	/^	std::vector<glm::vec2> position;$/;"	m	class:BodySystem
preceding	Polygon.cpp	/^glm::vec2& Polygon::Vertex::preceding()$/;"	f	class:Polygon::Vertex
preceding	Polygon.cpp	/^glm::vec2& SubPolygon::Vertex::preceding()$/;"	f	class:SubPolygon::Vertex
printVector	main.cpp	/^void printVector(std::vector<T> v)$/;"	f
project	Geometry.cpp	/^vec2 project(vec2 p, vec2 line_a, vec2 line_b)$/;"	f
project	typewriter/skyline-bl.h	/^		double project(double x, skyline_ptr iterationBegin, skyline_ptr iterationEnd)$/;"	f	class:SBL::SkylineBL_alg
ptr	glutils.h	/^    T* ptr;$/;"	m	class:BufferWriter
quad	Renderer.cpp	/^GLfloat quad[] = {$/;"	v
radius	Polygon.cpp	/^float Polygon::radius()$/;"	f	class:Polygon
randFloat	tmp.cpp	/^float randFloat() {$/;"	f
randomColor	tmp.cpp	/^glm::vec3 randomColor()$/;"	f
rawAtlas	typewriter/FontTexture.h	/^	unsigned char *rawAtlas;$/;"	m	class:FontTexture
readArrayFromFile	typewriter/FontTexture.cpp	/^void readArrayFromFile(std::ifstream &f, std::vector<T> &array)$/;"	f
real_greater_than	Polygon.cpp	/^bool real_greater_than(T a, T b, axis_tag<X>){ return a->x > b->x; }$/;"	f
real_greater_than	Polygon.cpp	/^bool real_greater_than(T a, T b, axis_tag<Y>){ return a->y > b->y; }$/;"	f
real_less_than	Polygon.cpp	/^bool real_less_than(T a, T b, axis_tag<X>){return a->x < b->x; }$/;"	f
real_less_than	Polygon.cpp	/^bool real_less_than(T a, T b, axis_tag<Y>){ return a->y < b->y; }$/;"	f
real_position	BodySystem.cpp	/^vec2 Body::real_position()$/;"	f	class:Body
rect_greaterThan	typewriter/skyline-bl.h	/^	bool rect_greaterThan(Size<T> rect1, Size<T> rect2) {$/;"	f	namespace:SBL
rectangle1	typewriter/FontRenderer.cpp	/^GLfloat rectangle1[] = {$/;"	v
rectangles	typewriter/skyline-bl.h	/^		std::vector<Size<T>> rectangles;$/;"	m	class:SBL::SkylineBL_alg
rectangle	main.cpp	/^GLfloat rectangle[] = {$/;"	v
renderBitmap	typewriter/FontTexture.cpp	/^FT_Bitmap renderBitmap(FT_Bitmap bitmap)$/;"	f
render	Renderer.cpp	/^void Renderer::render(int width, int height, float zoom)$/;"	f	class:Renderer
render	typewriter/FontRenderer.cpp	/^void FontRenderer::render(float width, float height)$/;"	f	class:FontRenderer
resolution	typewriter/FontTexture.h	/^	int resolution = 16;$/;"	m	class:FontTexture
right_down	main.cpp	/^bool left_down, right_down, up_down, down_down;$/;"	v
scroll_callback	main.cpp	/^void scroll_callback(GLFWwindow* window, double xoffset, double yoffset)$/;"	f
setFormat	glutils.cpp	/^void setFormat(const char *format, GLuint shaderProgram)$/;"	f
setIndex	Polygon.h	/^        void setIndex(int val) { index = val; }$/;"	f	class:Polygon::Vertex
setIndex	Polygon.h	/^        void setIndex(int val) { index = val; }$/;"	f	class:SubPolygon::Vertex
setSingleFormat	glutils.cpp	/^void setSingleFormat(const char *name, int numComponents, char ctype, GLsizei stride, int offset,$/;"	f
setVertexAttribPointer	glutils.cpp	/^void setVertexAttribPointer(GLuint shaderProgram, const char* name, GLint numComponents, GLenum type, GLsizei stride, int offset)$/;"	f
setup	typewriter/FontRenderer.cpp	/^void FontRenderer::setup()$/;"	f	class:FontRenderer
shaderProgram	typewriter/FontRenderer.h	/^	GLuint shaderProgram;$/;"	m	class:FontRenderer
shaders	shaders.h	/^namespace shaders {$/;"	n
shape	BodySystem.h	/^		inline Polygon& shape() { return system->shape[index]; }$/;"	f	class:Body
shape	BodySystem.h	/^	std::vector<Polygon> shape;$/;"	m	class:BodySystem
signedArea	Geometry.cpp	/^float signedArea(vec2 a, vec2 b, vec2 c)$/;"	f
signedArea	Polygon.cpp	/^float Polygon::signedArea()$/;"	f	class:Polygon
signedArea	Polygon.cpp	/^float SubPolygon::signedArea()$/;"	f	class:SubPolygon
sign	Geometry.cpp	/^int sign(float x)$/;"	f
size	typewriter/FontRenderer.h	/^	int size;$/;"	m	class:FontRenderer
skyline_ptr	typewriter/skyline-bl.h	/^	typedef std::set<Point>::iterator skyline_ptr;$/;"	t	namespace:SBL
skyline	typewriter/skyline-bl.h	/^		Skyline skyline;$/;"	m	class:SBL::SkylineBL_alg
sortByHeight	typewriter/skyline-bl.h	/^		void sortByHeight(std::vector<Size<T>> &rects)$/;"	f	class:SBL::SkylineBL_alg
split	Polygon.cpp	/^void SubPolygon::split(int a, int b, SubPolygon& out1, SubPolygon& out2)$/;"	f	class:SubPolygon
startIndex	Polygon.h	/^        int startIndex()        { return start_index;}$/;"	f	class:Polygon::Diagonal
start_index	Polygon.h	/^        int start_index;$/;"	m	class:Polygon::Diagonal
start_indices	Renderer.h	/^    std::vector<int> start_indices;$/;"	m	class:Renderer
start	Polygon.cpp	/^glm::vec2& Polygon::Edge::start() const$/;"	f	class:Polygon::Edge
start	Polygon.cpp	/^glm::vec2& SubPolygon::Edge::start() const$/;"	f	class:SubPolygon::Edge
start	Polygon.h	/^        glm::vec2& start() const { return parent->vertices[start_index];}$/;"	f	class:Polygon::Diagonal
stb_image_write_test	typewriter/stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi_write_bmp	typewriter/stb_image_write.h	/^int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_hdr	typewriter/stb_image_write.h	/^int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_png_to_mem	typewriter/stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_png	typewriter/stb_image_write.h	/^int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_tga	typewriter/stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_zlib_compress	typewriter/stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbiw__ZHASH	typewriter/stb_image_write.h	467;"	d
stbiw__crc32	typewriter/stb_image_write.h	/^unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__linear_to_rgbe	typewriter/stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	typewriter/stb_image_write.h	243;"	d
stbiw__paeth	typewriter/stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__sbcount	typewriter/stb_image_write.h	399;"	d
stbiw__sbfree	typewriter/stb_image_write.h	400;"	d
stbiw__sbgrow	typewriter/stb_image_write.h	396;"	d
stbiw__sbgrowf	typewriter/stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbmaybegrow	typewriter/stb_image_write.h	395;"	d
stbiw__sbm	typewriter/stb_image_write.h	391;"	d
stbiw__sbn	typewriter/stb_image_write.h	392;"	d
stbiw__sbneedgrow	typewriter/stb_image_write.h	394;"	d
stbiw__sbpush	typewriter/stb_image_write.h	398;"	d
stbiw__sbraw	typewriter/stb_image_write.h	390;"	d
stbiw__wp32	typewriter/stb_image_write.h	587;"	d
stbiw__wpcrc	typewriter/stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	typewriter/stb_image_write.h	586;"	d
stbiw__wptag	typewriter/stb_image_write.h	588;"	d
stbiw__write_dump_data	typewriter/stb_image_write.h	/^void stbiw__write_dump_data(FILE *f, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	typewriter/stb_image_write.h	/^void stbiw__write_hdr_scanline(FILE *f, int width, int comp, unsigned char *scratch, const float *scanline)$/;"	f
stbiw__write_run_data	typewriter/stb_image_write.h	/^void stbiw__write_run_data(FILE *f, int length, unsigned char databyte)$/;"	f
stbiw__zhash	typewriter/stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	typewriter/stb_image_write.h	456;"	d
stbiw__zlib_bitrev	typewriter/stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	typewriter/stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	typewriter/stb_image_write.h	455;"	d
stbiw__zlib_flushf	typewriter/stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff1	typewriter/stb_image_write.h	460;"	d
stbiw__zlib_huff2	typewriter/stb_image_write.h	461;"	d
stbiw__zlib_huff3	typewriter/stb_image_write.h	462;"	d
stbiw__zlib_huff4	typewriter/stb_image_write.h	463;"	d
stbiw__zlib_huffa	typewriter/stb_image_write.h	458;"	d
stbiw__zlib_huffb	typewriter/stb_image_write.h	465;"	d
stbiw__zlib_huff	typewriter/stb_image_write.h	464;"	d
stbiw_uint32	typewriter/stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
successive	Polygon.cpp	/^glm::vec2& Polygon::Vertex::successive()$/;"	f	class:Polygon::Vertex
successive	Polygon.cpp	/^glm::vec2& SubPolygon::Vertex::successive()$/;"	f	class:SubPolygon::Vertex
system	BodySystem.h	/^	BodySystem *system;$/;"	m	class:Body
system	Renderer.h	/^    BodySystem& system;$/;"	m	class:Renderer
textureRef	typewriter/FontRenderer.h	/^	GLuint textureRef;$/;"	m	class:FontRenderer
texture	typewriter/FontRenderer.h	/^	FontTexture &texture;$/;"	m	class:FontRenderer
theight	typewriter/FontTexture.h	/^	int twidth, theight;$/;"	m	struct:Glyph
timestep	BodySystem.cpp	/^void BodySystem::timestep(float delta)$/;"	f	class:BodySystem
timestep	World.h	/^	void timestep(float delta)$/;"	f	class:World
toFloat	typewriter/FontTexture.cpp	/^float *toFloat(double *image, int size)$/;"	f
torque	BodySystem.h	/^		inline float& torque() { return system->torque[index]; }$/;"	f	class:Body
torque	BodySystem.h	/^	std::vector<float> torque;$/;"	m	class:BodySystem
totalHeightIfInserted	typewriter/skyline-bl.h	/^		double totalHeightIfInserted(Size<T> rect, skyline_ptr where)$/;"	f	class:SBL::SkylineBL_alg
triangles_vao	Renderer.h	/^    GLuint triangles_vao, color_vao;$/;"	m	class:Renderer
triangles_vbo	Renderer.h	/^    GLuint triangles_vbo, color_vbo;$/;"	m	class:Renderer
triangulate	Polygon.cpp	/^void Polygon::triangulate(std::vector<SubPolygon> &parts, std::vector<Diagonal> &diagonals, std::vector<Triangle> &triangles)$/;"	f	class:Polygon
twidth	typewriter/FontTexture.h	/^	int twidth, theight;$/;"	m	struct:Glyph
type	typewriter/FontTexture.h	/^	AtlasType type;$/;"	m	class:FontTexture
uint	glutils.cpp	/^typedef unsigned int uint;$/;"	t	file:
u	typewriter/FontRenderer.h	/^	float x, y, u, v;$/;"	m	struct:FontVertex
u	typewriter/FontTexture.h	/^	int u, v;$/;"	m	struct:Glyph
uni_color	Renderer.h	/^    GLuint uni_color;$/;"	m	class:Renderer
uni_model	Renderer.h	/^    GLuint uni_proj, uni_view, uni_model;$/;"	m	class:Renderer
uni_proj	Renderer.h	/^    GLuint uni_proj, uni_view, uni_model;$/;"	m	class:Renderer
uni_view	Renderer.h	/^    GLuint uni_proj, uni_view, uni_model;$/;"	m	class:Renderer
up_down	main.cpp	/^bool left_down, right_down, up_down, down_down;$/;"	v
uploadElements	glutils.cpp	/^GLuint uploadElements(GLuint elements[], unsigned int size)$/;"	f
uploadVertices	glutils.h	/^GLuint uploadVertices(T data[], unsigned int size)$/;"	f
useExistingAtlas	typewriter/FontTexture.cpp	/^void FontTexture::useExistingAtlas(std::string atlaspath, std::string metadatapath)$/;"	f	class:FontTexture
value	tmp.h	/^        T value;$/;"	m	class:Graph::Node
velocity	BodySystem.h	/^		inline glm::vec2& velocity() { return system->velocity[index]; }$/;"	f	class:Body
velocity	BodySystem.h	/^	std::vector<glm::vec2> velocity;$/;"	m	class:BodySystem
vertices	Polygon.h	/^	std::vector<glm::vec2> vertices;$/;"	m	class:Polygon
viewMatrix2D	glutils.cpp	/^glm::mat4 viewMatrix2D(float centerX, float centerY, float scaleX, float scaleY)$/;"	f
v	typewriter/FontRenderer.h	/^	float x, y, u, v;$/;"	m	struct:FontVertex
v	typewriter/FontTexture.h	/^	int u, v;$/;"	m	struct:Glyph
width	typewriter/FontTexture.h	/^	float width, height;$/;"	m	struct:Glyph
width	typewriter/skyline-bl.h	/^		double width, height, x, y;$/;"	m	struct:SBL::Area
width	typewriter/skyline-bl.h	/^		double width, height;$/;"	m	class:SBL::SkylineBL_alg
width	typewriter/skyline-bl.h	/^		double width, height;$/;"	m	struct:SBL::Size
write3	typewriter/stb_image_write.h	/^static void write3(FILE *f, unsigned char a, unsigned char b, unsigned char c)$/;"	f
writeArrayToFile	typewriter/FontTexture.cpp	/^void writeArrayToFile(std::ofstream &f, std::vector<T> &array)$/;"	f
writeAtlasToFile	typewriter/FontTexture.cpp	/^void FontTexture::writeAtlasToFile(std::string outatlas, std::string outmeta)$/;"	f	class:FontTexture
write_pixels	typewriter/stb_image_write.h	/^static void write_pixels(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
write	glutils.h	/^    void write(T a) {$/;"	f	class:BufferWriter
write	glutils.h	/^    void write(T a, T b) {$/;"	f	class:BufferWriter
write	glutils.h	/^    void write(T a, T b, T c) {$/;"	f	class:BufferWriter
writefv	typewriter/stb_image_write.h	/^static void writefv(FILE *f, const char *fmt, va_list v)$/;"	f
xadvance	typewriter/FontTexture.h	/^	float xadvance, yadvance;$/;"	m	struct:Glyph
x	Polygon.cpp	/^int SubPolygon::Edge::x(int y) const$/;"	f	class:SubPolygon::Edge
x	typewriter/FontRenderer.h	/^	float x, y, u, v;$/;"	m	struct:FontVertex
x	typewriter/skyline-bl.h	/^		double width, height, x, y;$/;"	m	struct:SBL::Area
x	typewriter/skyline-bl.h	/^		double x, y;$/;"	m	struct:SBL::Point
xoffset	typewriter/FontTexture.h	/^	float xoffset, yoffset;$/;"	m	struct:Glyph
yadvance	typewriter/FontTexture.h	/^	float xadvance, yadvance;$/;"	m	struct:Glyph
y	Polygon.cpp	/^int SubPolygon::Edge::y(int x) const$/;"	f	class:SubPolygon::Edge
y	typewriter/FontRenderer.h	/^	float x, y, u, v;$/;"	m	struct:FontVertex
y	typewriter/skyline-bl.h	/^		double width, height, x, y;$/;"	m	struct:SBL::Area
y	typewriter/skyline-bl.h	/^		double x, y;$/;"	m	struct:SBL::Point
yoffset	typewriter/FontTexture.h	/^	float xoffset, yoffset;$/;"	m	struct:Glyph
zoom	main.cpp	/^float zoom = 1;$/;"	v
~FontTexture	typewriter/FontTexture.cpp	/^FontTexture::~FontTexture()$/;"	f	class:FontTexture
